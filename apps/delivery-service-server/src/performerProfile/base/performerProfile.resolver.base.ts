/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PerformerProfile } from "./PerformerProfile";
import { PerformerProfileCountArgs } from "./PerformerProfileCountArgs";
import { PerformerProfileFindManyArgs } from "./PerformerProfileFindManyArgs";
import { PerformerProfileFindUniqueArgs } from "./PerformerProfileFindUniqueArgs";
import { CreatePerformerProfileArgs } from "./CreatePerformerProfileArgs";
import { UpdatePerformerProfileArgs } from "./UpdatePerformerProfileArgs";
import { DeletePerformerProfileArgs } from "./DeletePerformerProfileArgs";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { DeliveryContractFindManyArgs } from "../../deliveryContract/base/DeliveryContractFindManyArgs";
import { DeliveryContract } from "../../deliveryContract/base/DeliveryContract";
import { User } from "../../user/base/User";
import { PerformerProfileService } from "../performerProfile.service";
@graphql.Resolver(() => PerformerProfile)
export class PerformerProfileResolverBase {
  constructor(protected readonly service: PerformerProfileService) {}

  async _performerProfilesMeta(
    @graphql.Args() args: PerformerProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PerformerProfile])
  async performerProfiles(
    @graphql.Args() args: PerformerProfileFindManyArgs
  ): Promise<PerformerProfile[]> {
    return this.service.performerProfiles(args);
  }

  @graphql.Query(() => PerformerProfile, { nullable: true })
  async performerProfile(
    @graphql.Args() args: PerformerProfileFindUniqueArgs
  ): Promise<PerformerProfile | null> {
    const result = await this.service.performerProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PerformerProfile)
  async createPerformerProfile(
    @graphql.Args() args: CreatePerformerProfileArgs
  ): Promise<PerformerProfile> {
    return await this.service.createPerformerProfile({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PerformerProfile)
  async updatePerformerProfile(
    @graphql.Args() args: UpdatePerformerProfileArgs
  ): Promise<PerformerProfile | null> {
    try {
      return await this.service.updatePerformerProfile({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PerformerProfile)
  async deletePerformerProfile(
    @graphql.Args() args: DeletePerformerProfileArgs
  ): Promise<PerformerProfile | null> {
    try {
      return await this.service.deletePerformerProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Feedback], { name: "feedbacks" })
  async findFeedbacks(
    @graphql.Parent() parent: PerformerProfile,
    @graphql.Args() args: FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    const results = await this.service.findFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [DeliveryContract], { name: "deliveryContracts" })
  async findDeliveryContracts(
    @graphql.Parent() parent: PerformerProfile,
    @graphql.Args() args: DeliveryContractFindManyArgs
  ): Promise<DeliveryContract[]> {
    const results = await this.service.findDeliveryContracts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: PerformerProfile
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
