/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerformerProfileService } from "../performerProfile.service";
import { PerformerProfileCreateInput } from "./PerformerProfileCreateInput";
import { PerformerProfile } from "./PerformerProfile";
import { PerformerProfileFindManyArgs } from "./PerformerProfileFindManyArgs";
import { PerformerProfileWhereUniqueInput } from "./PerformerProfileWhereUniqueInput";
import { PerformerProfileUpdateInput } from "./PerformerProfileUpdateInput";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { FeedbackWhereUniqueInput } from "../../feedback/base/FeedbackWhereUniqueInput";
import { DeliveryContractFindManyArgs } from "../../deliveryContract/base/DeliveryContractFindManyArgs";
import { DeliveryContract } from "../../deliveryContract/base/DeliveryContract";
import { DeliveryContractWhereUniqueInput } from "../../deliveryContract/base/DeliveryContractWhereUniqueInput";

export class PerformerProfileControllerBase {
  constructor(protected readonly service: PerformerProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerformerProfile })
  async createPerformerProfile(
    @common.Body() data: PerformerProfileCreateInput
  ): Promise<PerformerProfile> {
    return await this.service.createPerformerProfile({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerformerProfile] })
  @ApiNestedQuery(PerformerProfileFindManyArgs)
  async performerProfiles(
    @common.Req() request: Request
  ): Promise<PerformerProfile[]> {
    const args = plainToClass(PerformerProfileFindManyArgs, request.query);
    return this.service.performerProfiles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerformerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async performerProfile(
    @common.Param() params: PerformerProfileWhereUniqueInput
  ): Promise<PerformerProfile | null> {
    const result = await this.service.performerProfile({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerformerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerformerProfile(
    @common.Param() params: PerformerProfileWhereUniqueInput,
    @common.Body() data: PerformerProfileUpdateInput
  ): Promise<PerformerProfile | null> {
    try {
      return await this.service.updatePerformerProfile({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rating: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerformerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerformerProfile(
    @common.Param() params: PerformerProfileWhereUniqueInput
  ): Promise<PerformerProfile | null> {
    try {
      return await this.service.deletePerformerProfile({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rating: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/feedbacks")
  @ApiNestedQuery(FeedbackFindManyArgs)
  async findFeedbacks(
    @common.Req() request: Request,
    @common.Param() params: PerformerProfileWhereUniqueInput
  ): Promise<Feedback[]> {
    const query = plainToClass(FeedbackFindManyArgs, request.query);
    const results = await this.service.findFeedbacks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        comment: true,
        rating: true,

        user: {
          select: {
            id: true,
          },
        },

        performerProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/feedbacks")
  async connectFeedbacks(
    @common.Param() params: PerformerProfileWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        connect: body,
      },
    };
    await this.service.updatePerformerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/feedbacks")
  async updateFeedbacks(
    @common.Param() params: PerformerProfileWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        set: body,
      },
    };
    await this.service.updatePerformerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/feedbacks")
  async disconnectFeedbacks(
    @common.Param() params: PerformerProfileWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        disconnect: body,
      },
    };
    await this.service.updatePerformerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/deliveryContracts")
  @ApiNestedQuery(DeliveryContractFindManyArgs)
  async findDeliveryContracts(
    @common.Req() request: Request,
    @common.Param() params: PerformerProfileWhereUniqueInput
  ): Promise<DeliveryContract[]> {
    const query = plainToClass(DeliveryContractFindManyArgs, request.query);
    const results = await this.service.findDeliveryContracts(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        terms: true,
        price: true,
        status: true,

        order: {
          select: {
            id: true,
          },
        },

        performerProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deliveryContracts")
  async connectDeliveryContracts(
    @common.Param() params: PerformerProfileWhereUniqueInput,
    @common.Body() body: DeliveryContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryContracts: {
        connect: body,
      },
    };
    await this.service.updatePerformerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deliveryContracts")
  async updateDeliveryContracts(
    @common.Param() params: PerformerProfileWhereUniqueInput,
    @common.Body() body: DeliveryContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryContracts: {
        set: body,
      },
    };
    await this.service.updatePerformerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deliveryContracts")
  async disconnectDeliveryContracts(
    @common.Param() params: PerformerProfileWhereUniqueInput,
    @common.Body() body: DeliveryContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryContracts: {
        disconnect: body,
      },
    };
    await this.service.updatePerformerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
