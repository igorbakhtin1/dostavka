/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryContractService } from "../deliveryContract.service";
import { DeliveryContractCreateInput } from "./DeliveryContractCreateInput";
import { DeliveryContract } from "./DeliveryContract";
import { DeliveryContractFindManyArgs } from "./DeliveryContractFindManyArgs";
import { DeliveryContractWhereUniqueInput } from "./DeliveryContractWhereUniqueInput";
import { DeliveryContractUpdateInput } from "./DeliveryContractUpdateInput";

export class DeliveryContractControllerBase {
  constructor(protected readonly service: DeliveryContractService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryContract })
  async createDeliveryContract(
    @common.Body() data: DeliveryContractCreateInput
  ): Promise<DeliveryContract> {
    return await this.service.createDeliveryContract({
      data: {
        ...data,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,

        performerProfile: data.performerProfile
          ? {
              connect: data.performerProfile,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        terms: true,
        price: true,
        status: true,

        order: {
          select: {
            id: true,
          },
        },

        performerProfile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryContract] })
  @ApiNestedQuery(DeliveryContractFindManyArgs)
  async deliveryContracts(
    @common.Req() request: Request
  ): Promise<DeliveryContract[]> {
    const args = plainToClass(DeliveryContractFindManyArgs, request.query);
    return this.service.deliveryContracts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        terms: true,
        price: true,
        status: true,

        order: {
          select: {
            id: true,
          },
        },

        performerProfile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryContract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryContract(
    @common.Param() params: DeliveryContractWhereUniqueInput
  ): Promise<DeliveryContract | null> {
    const result = await this.service.deliveryContract({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        terms: true,
        price: true,
        status: true,

        order: {
          select: {
            id: true,
          },
        },

        performerProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryContract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryContract(
    @common.Param() params: DeliveryContractWhereUniqueInput,
    @common.Body() data: DeliveryContractUpdateInput
  ): Promise<DeliveryContract | null> {
    try {
      return await this.service.updateDeliveryContract({
        where: params,
        data: {
          ...data,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,

          performerProfile: data.performerProfile
            ? {
                connect: data.performerProfile,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          terms: true,
          price: true,
          status: true,

          order: {
            select: {
              id: true,
            },
          },

          performerProfile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryContract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryContract(
    @common.Param() params: DeliveryContractWhereUniqueInput
  ): Promise<DeliveryContract | null> {
    try {
      return await this.service.deleteDeliveryContract({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          terms: true,
          price: true,
          status: true,

          order: {
            select: {
              id: true,
            },
          },

          performerProfile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
