/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryContract } from "./DeliveryContract";
import { DeliveryContractCountArgs } from "./DeliveryContractCountArgs";
import { DeliveryContractFindManyArgs } from "./DeliveryContractFindManyArgs";
import { DeliveryContractFindUniqueArgs } from "./DeliveryContractFindUniqueArgs";
import { CreateDeliveryContractArgs } from "./CreateDeliveryContractArgs";
import { UpdateDeliveryContractArgs } from "./UpdateDeliveryContractArgs";
import { DeleteDeliveryContractArgs } from "./DeleteDeliveryContractArgs";
import { Order } from "../../order/base/Order";
import { PerformerProfile } from "../../performerProfile/base/PerformerProfile";
import { DeliveryContractService } from "../deliveryContract.service";
@graphql.Resolver(() => DeliveryContract)
export class DeliveryContractResolverBase {
  constructor(protected readonly service: DeliveryContractService) {}

  async _deliveryContractsMeta(
    @graphql.Args() args: DeliveryContractCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryContract])
  async deliveryContracts(
    @graphql.Args() args: DeliveryContractFindManyArgs
  ): Promise<DeliveryContract[]> {
    return this.service.deliveryContracts(args);
  }

  @graphql.Query(() => DeliveryContract, { nullable: true })
  async deliveryContract(
    @graphql.Args() args: DeliveryContractFindUniqueArgs
  ): Promise<DeliveryContract | null> {
    const result = await this.service.deliveryContract(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryContract)
  async createDeliveryContract(
    @graphql.Args() args: CreateDeliveryContractArgs
  ): Promise<DeliveryContract> {
    return await this.service.createDeliveryContract({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,

        performerProfile: args.data.performerProfile
          ? {
              connect: args.data.performerProfile,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DeliveryContract)
  async updateDeliveryContract(
    @graphql.Args() args: UpdateDeliveryContractArgs
  ): Promise<DeliveryContract | null> {
    try {
      return await this.service.updateDeliveryContract({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,

          performerProfile: args.data.performerProfile
            ? {
                connect: args.data.performerProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryContract)
  async deleteDeliveryContract(
    @graphql.Args() args: DeleteDeliveryContractArgs
  ): Promise<DeliveryContract | null> {
    try {
      return await this.service.deleteDeliveryContract(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  async getOrder(
    @graphql.Parent() parent: DeliveryContract
  ): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => PerformerProfile, {
    nullable: true,
    name: "performerProfile",
  })
  async getPerformerProfile(
    @graphql.Parent() parent: DeliveryContract
  ): Promise<PerformerProfile | null> {
    const result = await this.service.getPerformerProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
